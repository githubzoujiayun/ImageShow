package com.suo.image;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.Serializable;
import java.lang.ref.ReferenceQueue;
import java.lang.ref.SoftReference;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;

import android.content.Context;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;

class ImageCacheObj implements Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = -1156096161502570515L;

	public ImageCacheObj(String fileName, int cacheTime) {
		this.FileName = fileName;
		this.CacheTime = cacheTime;
		this.CreateTime = new Date();
	}

	public String FileName; // 文件名
	public Date CreateTime; // 创建时间
	public int CacheTime; // 保存时间，单位为分钟
}

public class ImageCache {
	/**
	 * 单例
	 */
	private static ImageCache _instance = new ImageCache();

	private ImageCache() {
	}

	public static synchronized ImageCache getInstance() {
		return _instance;
	}

	private final String INDEX_FILE_NAME = "suo.img.idx";

	private ReferenceQueue<Drawable> queue = new ReferenceQueue<Drawable>();

	/**
	 * 索引
	 */
	private Map<String, ImageCacheObj> m_index = new HashMap<String, ImageCacheObj>();

	/**
	 * 缓存 此部分内存，会根据情况被释放的
	 */
	//private Map<String, ImgSoftReference> m_cache = new HashMap<String, ImgSoftReference>();

	/**
	 * 从云端下载
	 * 
	 * @param url
	 * @return
	 */
	public boolean downloadDrawableByUrl(BaseActivity context, String url) {
		if ((null == url) || url.equals("")) {
			return false;
		}

		// 检查缓存
		if (imageExists(url)) {
			return true;
		}

		// 开始下载图片
		try {
			InputStream is = new DefaultHttpClient().execute(new HttpGet(url))
					.getEntity().getContent();
			int position = url.lastIndexOf("/");
			String name = url.substring(position + 1, url.length() - 4);
			String imgPath = this.saveImage(name, is);
			
			context.putString(url, name, true);
			
			// 写入到本地索引
			saveIndex(url, imgPath);
			is.close();
			//Log.d("文件url:" + url + ",下载成功！！");
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
		return true;

	}

	/**
	 * 保存Image文件
	 * 
	 * 本地图片存在sdcard/.imageShow/image下面
	 * 
	 * @param is
	 *            ：输入量
	 * @param dir
	 *            ：文件目录，在SD卡上面的目录
	 * @return 返回保存文件的路径
	 */
	private String saveImage(String name, InputStream is) {
		String filePath = "";
		if (FileUtil.SDCardExists()) {
			String path = Pub.getBaseDir() + "image";
			File fileDir = new File(path);
			if (!fileDir.exists()) {// 判断存储图片的目录是否存在，不存在则创建
				fileDir.mkdirs();
			}

//			String imgName = new SimpleDateFormat("yyyyMMddHHmmss")
//					.format(new Date()) + Math.random() * 100 + ".suo";// 命名
			String imgName = name + ".jpg";

			File imgFile = new File(path, imgName);
			if (!imgFile.exists()) {
				try {
					FileOutputStream fos = new FileOutputStream(imgFile);
					byte[] buff = new byte[1024];
					int size = 0;
					while ((size = is.read(buff)) != -1) {
						fos.write(buff, 0, size);
					}
					fos.flush();
					fos.close();

					filePath = path + "/" + imgName;
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		return filePath;
	}

	/**
	 * 读取Drawable 根据URL读取drawable，当发生内存溢出的时候，清理内存然后继续
	 * 
	 * @param url
	 * @return
	 */
	public synchronized Drawable getDrawable(BaseActivity context, String url) {
		try {
			Drawable drawable = this._getDrawable(context, url);
			return drawable;
		} catch (OutOfMemoryError me) {
			recycleMemory();
			return this._getDrawable(context, url);
		}
	}

	private synchronized Drawable _getDrawable(BaseActivity context, String url) {
		//long startTime = System.nanoTime();
		//long endTime;
		// 清除引用
		/*
		 * 取消内存缓存，2012-12-13，shihaifeng
		ImgSoftReference _sr = null;
		while ((_sr = (ImgSoftReference) queue.poll()) != null) {
			m_cache.remove(_sr.url);
			Log.d("回收软引用");
		}
		*/
		
		Drawable drawable = null;
		if ((null == url) || (url.length() == 0)) {
			return null;
		}
		// 1.从本地缓存读取
		//drawable = this.m_cache.get(url);
		/*取消内存缓存：2012-12-13，shihaifeng
		ImgSoftReference sr = this.m_cache.get(url);
		if (sr != null) {
			drawable = sr.get();
			//endTime = System.nanoTime();
			//Log.d("读取文件耗时0：" + (endTime - startTime) / 1000);
			if(null != drawable)
				return drawable;
		}
		*/

		// 2.从本地文件读取
//		String cachePath = this.getImagePath(url); 8.27 15:40
		
		
		String cachePath = context.getString(url, null);
		
		// endTime = System.nanoTime();
		// Log.d("读取文件耗时1：" + (endTime - startTime) / 1000);
		if (cachePath != null) {
			// Log.d(cachePath);
			drawable = this.getLocalImage(cachePath);
			// Log.d("从SDCard 读取Drawable:" + drawable);
			// 写缓存
			//this.m_cache.put(url, new ImgSoftReference(drawable, queue,url));
		}
		//endTime = System.nanoTime();
		//Log.d("读取文件耗时2：" + (endTime - startTime) / 1000);

		return drawable;
	}

	/**
	 * 过期文件清理 本地图片存在sdcard/.imageshow/image下面
	 */
	public void cleanUp() {
		if (!FileUtil.SDCardExists()) {
			return;
		}
		// 开始清理
		try {
			String path = Pub.getBaseDir() + "image";
			File fileDir = new File(path);
			if (!fileDir.exists()) {// 判断存储图片的目录是否存在，不存在则退出
				return;
			}
			// 检查文件
			File[] fs = fileDir.listFiles();
			for (int i = 0; i < fs.length; ++i) {
				File f = fs[i];
				String filename = f.getAbsolutePath();
				// 检查是否存在
				if (this.existsInIndex(filename)) {
					continue;
				}
				// 检查是否是索引文件
				if (f.getName().equals(this.INDEX_FILE_NAME)) {
					continue;
				}
				// 删除
				f.delete();
//				Log.d("文件:" + filename + ",已经删除");
			}
		} catch (Exception exp) {
			exp.printStackTrace();
		}
	}

	/**
	 * 判断image文件是否已经存在
	 * 
	 * @param url
	 * @return
	 */
	private synchronized boolean imageExists(String url) {
		if (m_index.containsKey(url)) {
			String cachePath = this.getImagePath(url);
			if (Util.fileExists(cachePath)) {
				return true;
			}
		}
		return false;
	}

	/**
	 * 保存url--文件名索引
	 * 
	 * @param url
	 * @param imagePath
	 */
	private synchronized void saveIndex(String url, String imagePath,
			int cacheTime) {

		this.m_index.put(url, new ImageCacheObj(imagePath, cacheTime));
	}

	/**
	 * 保存索引 默认保留5天的数据
	 * 
	 * @param url
	 * @param imagePath
	 */
	private synchronized void saveIndex(String url, String imagePath) {
		saveIndex(url, imagePath, 60 * 24 * 5);
	}

	/**
	 * 从索引读取文件名
	 * 
	 * @param url
	 * @return
	 */
	private synchronized String getImagePath(String url) {
		ImageCacheObj obj = m_index.get(url);
		if (obj == null)
			return null;
		return obj.FileName;
	}

	/**
	 * 判断文件是否存在 检查索引是否存在,不存在的，就可以删除了
	 */
	private synchronized boolean existsInIndex(String filename) {
		if (this.m_filelist_not_exp.containsKey(filename)) {
			return true;
		}
		return false;
	}

	/**
	 * 读取本地图片 本地图片存在sdcard/.imageshow/image下面
	 * 
	 * @param filePath
	 * @return
	 */
	private Drawable getLocalImage(String filePath) {
		filePath = Pub.getBaseDir() + "image/" + filePath + ".jpg";
		// 从本地缓存读取
		Drawable drawable = null;
		try {
			File imgFile = new File(filePath);
			if (imgFile.exists()) {
				drawable = new BitmapDrawable(filePath);
			}
		} catch (Exception e) {
			drawable = null;
		}
		return drawable;
	}

	/**
	 * 回收内存
	 */
	private synchronized void recycleMemory() {
		//Log.d("节点总个数：" + this.m_cache.size());
		Log.d("开始垃圾收集");
		Util.printMemoryInfo();
		//this.m_cache.clear();
		System.gc();
		Util.printMemoryInfo();
	}

	/**
	 * 图片Cache初始化 初始化所做工作如下： 1、加载索引 2、清理不需要的文件
	 */
	public void initialize() {
		// 1.加载索引
		readIndexFromFile();
		//printIndex();
		// 2.启动清理线程
		new Thread() {
			@Override
			public void run() {
				Log.d("清理工作开始");
				long startTime = System.nanoTime();
				ImageCache.getInstance().cleanUp();
				long endTime = System.nanoTime();
				Log.d("清理工作完成！！！！耗时：" + (endTime - startTime)
						/ 1000);
			}
		}.start();
	}

	/**
	 * 未过期文件列表
	 */
	private Map<String, Boolean> m_filelist_not_exp = new HashMap<String, Boolean>();

	/**
	 * 读取索引 从文件中读取索引，并且过滤时间条件
	 */
	private void readIndexFromFile() {
		if (!FileUtil.SDCardExists())
			return;
		String path = Pub.getBaseDir();
		path += INDEX_FILE_NAME;
		Map<String, ImageCacheObj> m = (Map<String, ImageCacheObj>) FileUtil
				.readObjFromFile(path);
		if (m != null) {
			Log.d("读到索引，开始处理... ...");
			// 过滤早期的索引
			Date now = new Date();
			for (Map.Entry<String, ImageCacheObj> entry : m.entrySet()) {
				ImageCacheObj ico = entry.getValue();
				Calendar cal = Calendar.getInstance();
				cal.setTime(ico.CreateTime);
				cal.add(Calendar.MINUTE, ico.CacheTime);
				java.util.Date dt = cal.getTime();
				
				Log.d("重构索引：dt:" + dt + ",now " + now );
				// 未到期
				if ((dt.after(now)) || (ico.CacheTime == 0)) {
					// Log.d("dt:" + dt + ",now " + now +
					// " was indexed.");
					this.m_index.put(entry.getKey(), entry.getValue());
					this.m_filelist_not_exp.put(ico.FileName, true);
				}
			}
		}
	}

	/**
	 * 图片Cache最终化 程序退出时候调用，用来保存索引文件
	 */
	public void finalize() {
		// 保存索引文件
		if (FileUtil.SDCardExists()) {
			String path = Pub.getBaseDir();
			path += INDEX_FILE_NAME;
			FileUtil.writeObjToFile(m_index, path);
			//Log.d("索引保存成功");
		}
	}

	private void printIndex() {
		for (Map.Entry<String, ImageCacheObj> entry : m_index.entrySet()) {
			ImageCacheObj obj = entry.getValue();
			Log.d("key:" +entry.getKey()+ ",文件:" + obj.FileName + "," + obj.CreateTime
					+ ",cacheTime:" + obj.CacheTime);
		}
	}
}

/**
 * 软引用
 * @author 61
 *
 */
class ImgSoftReference extends SoftReference<Drawable> {
	public String url;
	public ImgSoftReference(Drawable d, ReferenceQueue<Drawable> q, String url) {
		super(d,q);
		this.url = url;
	}
}